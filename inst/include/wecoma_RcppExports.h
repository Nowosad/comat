// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#ifndef RCPP_wecoma_RCPPEXPORTS_H_GEN_
#define RCPP_wecoma_RCPPEXPORTS_H_GEN_

#include <RcppArmadillo.h>
#include <Rcpp.h>

namespace wecoma {

    using namespace Rcpp;

    namespace {
        void validateSignature(const char* sig) {
            Rcpp::Function require = Rcpp::Environment::base_env()["require"];
            require("wecoma", Rcpp::Named("quietly") = true);
            typedef int(*Ptr_validate)(const char*);
            static Ptr_validate p_validate = (Ptr_validate)
                R_GetCCallable("wecoma", "_wecoma_RcppExport_validate");
            if (!p_validate(sig)) {
                throw Rcpp::function_not_exported(
                    "C++ function with signature '" + std::string(sig) + "' not found in wecoma");
            }
        }
    }

    inline double rcpp_get_entropy(NumericVector x, std::string base = "log2") {
        typedef SEXP(*Ptr_rcpp_get_entropy)(SEXP,SEXP);
        static Ptr_rcpp_get_entropy p_rcpp_get_entropy = NULL;
        if (p_rcpp_get_entropy == NULL) {
            validateSignature("double(*rcpp_get_entropy)(NumericVector,std::string)");
            p_rcpp_get_entropy = (Ptr_rcpp_get_entropy)R_GetCCallable("wecoma", "_wecoma_rcpp_get_entropy");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_rcpp_get_entropy(Shield<SEXP>(Rcpp::wrap(x)), Shield<SEXP>(Rcpp::wrap(base)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<double >(rcpp_result_gen);
    }

    inline IntegerMatrix rcpp_get_coocurrence_matrix(const IntegerMatrix x, const arma::imat directions) {
        typedef SEXP(*Ptr_rcpp_get_coocurrence_matrix)(SEXP,SEXP);
        static Ptr_rcpp_get_coocurrence_matrix p_rcpp_get_coocurrence_matrix = NULL;
        if (p_rcpp_get_coocurrence_matrix == NULL) {
            validateSignature("IntegerMatrix(*rcpp_get_coocurrence_matrix)(const IntegerMatrix,const arma::imat)");
            p_rcpp_get_coocurrence_matrix = (Ptr_rcpp_get_coocurrence_matrix)R_GetCCallable("wecoma", "_wecoma_rcpp_get_coocurrence_matrix");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_rcpp_get_coocurrence_matrix(Shield<SEXP>(Rcpp::wrap(x)), Shield<SEXP>(Rcpp::wrap(directions)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<IntegerMatrix >(rcpp_result_gen);
    }

    inline NumericMatrix rcpp_get_wecoma(const IntegerMatrix x, const NumericMatrix w, const arma::imat directions, const std::string fun, const std::string na_action) {
        typedef SEXP(*Ptr_rcpp_get_wecoma)(SEXP,SEXP,SEXP,SEXP,SEXP);
        static Ptr_rcpp_get_wecoma p_rcpp_get_wecoma = NULL;
        if (p_rcpp_get_wecoma == NULL) {
            validateSignature("NumericMatrix(*rcpp_get_wecoma)(const IntegerMatrix,const NumericMatrix,const arma::imat,const std::string,const std::string)");
            p_rcpp_get_wecoma = (Ptr_rcpp_get_wecoma)R_GetCCallable("wecoma", "_wecoma_rcpp_get_wecoma");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_rcpp_get_wecoma(Shield<SEXP>(Rcpp::wrap(x)), Shield<SEXP>(Rcpp::wrap(w)), Shield<SEXP>(Rcpp::wrap(directions)), Shield<SEXP>(Rcpp::wrap(fun)), Shield<SEXP>(Rcpp::wrap(na_action)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<NumericMatrix >(rcpp_result_gen);
    }

}

#endif // RCPP_wecoma_RCPPEXPORTS_H_GEN_
